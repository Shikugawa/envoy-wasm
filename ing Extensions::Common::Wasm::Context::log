[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 981fc55b5..d9a4f40e9 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -35,4 +35,3 @@[m [muser.bazelrc[m
 **/Cargo.lock[m
 CMakeLists.txt[m
 cmake-build-debug[m
[31m-/target[m
\ No newline at end of file[m
[1mdiff --git a/api/wasm/README.md b/api/wasm/README.md[m
[1mdeleted file mode 100644[m
[1mindex acaa51d74..000000000[m
[1m--- a/api/wasm/README.md[m
[1m+++ /dev/null[m
[36m@@ -1,42 +0,0 @@[m
[31m-Envoy hooks:[m
[31m-[m
[31m-- [ ] core: logging[m
[31m-- [ ] core: stats[m
[31m-- [ ] core: http callouts[m
[31m-- [ ] core: gRPC callouts[m
[31m-- [ ] http filters: accept/reject request(?)[m
[31m-- [ ] http filters: get/set header[m
[31m-- [ ] http filters: get all headers[m
[31m-- [ ] http filters: get/set body[m
[31m-- [ ] http filters: get/set metadata[m
[31m-- [ ] http filters: access log[m
[31m-- [ ] network filters: accept/reject connection[m
[31m-- [ ] network filters: mutate payload[m
[31m-- [ ] network filters: get/set metadata[m
[31m-- [ ] network filters: access log[m
[31m-- [ ] listener filters: accept/reject connection[m
[31m-- [ ] listener filters: peak at payload[m
[31m-- [ ] listener filters: get/set metadata[m
[31m-- [ ] listener filters: consume payload[m
[31m-- [ ] transport sockets[m
[31m-[m
[31m-Features:[m
[31m-[m
[31m-- [ ] shared key/value store (per filter by default)[m
[31m-[m
[31m-Supported programming languages:[m
[31m-[m
[31m-- [ ] C and C++ (using [Emscripten])[m
[31m-- [ ] Go (using [TinyGo])[m
[31m-- [ ] Rust[m
[31m-[m
[31m-Future additions:[m
[31m-[m
[31m-- [ ] Go (using `syscall/js`)[m
[31m-- [ ] Java (using [TeaVM])[m
[31m-- [ ] TypeScript (using [AssemblyScript])[m
[31m-[m
[31m-[AssemblyScript]: https://assemblyscript.org/[m
[31m-[Emscripten]: https://kripken.github.io/emscripten-site/[m
[31m-[TeaVM]: http://teavm.org/[m
[31m-[TinyGo]: https://tinygo.readthedocs.io/en/latest/[m
[1mdiff --git a/bazel/dependency_imports.bzl b/bazel/dependency_imports.bzl[m
[1mindex 2f087cb7f..ff3951445 100644[m
[1m--- a/bazel/dependency_imports.bzl[m
[1m+++ b/bazel/dependency_imports.bzl[m
[36m@@ -4,11 +4,11 @@[m [mload("@envoy_build_tools//toolchains:rbe_toolchains_config.bzl", "rbe_toolchains[m
 load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")[m
 load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")[m
 load("@upb//bazel:repository_defs.bzl", upb_bazel_version_repository = "bazel_version_repository")[m
[31m-load("@io_bazel_rules_rust//rust:repositories.bzl", "rust_repositories")[m
[31m-load("@io_bazel_rules_rust//:workspace.bzl", "bazel_version")[m
 load("@config_validation_pip3//:requirements.bzl", config_validation_pip_install = "pip_install")[m
 load("@protodoc_pip3//:requirements.bzl", protodoc_pip_install = "pip_install")[m
 load("@rules_antlr//antlr:deps.bzl", "antlr_dependencies")[m
[32m+[m[32mload("@io_bazel_rules_rust//rust:repositories.bzl", "rust_repositories")[m
[32m+[m[32mload("@io_bazel_rules_rust//:workspace.bzl", "bazel_version")[m
 [m
 # go version for rules_go[m
 GO_VERSION = "1.14.4"[m
[1mdiff --git a/bazel/external/memory_units.BUILD b/bazel/external/memory_units.BUILD[m
[1mdeleted file mode 100644[m
[1mindex ee9fa49f5..000000000[m
[1m--- a/bazel/external/memory_units.BUILD[m
[1m+++ /dev/null[m
[36m@@ -1,9 +0,0 @@[m
[31m-load("@io_bazel_rules_rust//rust:rust.bzl", "rust_library")[m
[31m-[m
[31m-licenses(["notice"])  # Apache 2[m
[31m-[m
[31m-rust_library([m
[31m-    name = "memory_units",[m
[31m-    srcs = glob(["src/**/*.rs"]),[m
[31m-    visibility = ["//visibility:public"],[m
[31m-)[m
[1mdiff --git a/bazel/external/wee_alloc.BUILD b/bazel/external/wee_alloc.BUILD[m
[1mdeleted file mode 100644[m
[1mindex c28e424a4..000000000[m
[1m--- a/bazel/external/wee_alloc.BUILD[m
[1m+++ /dev/null[m
[36m@@ -1,13 +0,0 @@[m
[31m-load("@io_bazel_rules_rust//rust:rust.bzl", "rust_library")[m
[31m-[m
[31m-licenses(["notice"])  # Apache 2[m
[31m-[m
[31m-rust_library([m
[31m-    name = "wee_alloc",[m
[31m-    srcs = glob(["wee_alloc/**/*.rs"]),[m
[31m-    visibility = ["//visibility:public"],[m
[31m-    deps = [[m
[31m-        "@cfg_if",[m
[31m-        "@memory_units",[m
[31m-    ],[m
[31m-)[m
[1mdiff --git a/bazel/repositories.bzl b/bazel/repositories.bzl[m
[1mindex 7af805e2b..ab97d410f 100644[m
[1m--- a/bazel/repositories.bzl[m
[1m+++ b/bazel/repositories.bzl[m
[36m@@ -140,7 +140,7 @@[m [mdef _rust_deps():[m
     _repository_impl("io_bazel_rules_rust")[m
     _repository_impl([m
         name = "cfg_if",[m
[31m-        build_file = "@envoy//bazel/external:cfg_if.BUILD",[m
[32m+[m[32m        build_file = "//bazel/external:cfg_if.BUILD",[m
     )[m
     _repository_impl([m
         name = "log",[m
[1mdiff --git a/bazel/wasm/wasm.bzl b/bazel/wasm/wasm.bzl[m
[1mindex e35fb30d2..756074b2d 100644[m
[1m--- a/bazel/wasm/wasm.bzl[m
[1m+++ b/bazel/wasm/wasm.bzl[m
[36m@@ -1,5 +1,5 @@[m
[31m-load("@io_bazel_rules_rust//rust:rust.bzl", "rust_binary")[m
 load("@rules_cc//cc:defs.bzl", "cc_binary")[m
[32m+[m[32mload("@io_bazel_rules_rust//rust:rust.bzl", "rust_binary")[m
 [m
 def _wasm_cc_transition_impl(settings, attr):[m
     return {[m
[36m@@ -31,7 +31,6 @@[m [mwasm_cc_transition = transition([m
         "//command_line_option:collect_code_coverage",[m
     ],[m
 )[m
[31m-[m
 wasm_rust_transition = transition([m
     implementation = _wasm_rust_transition_impl,[m
     inputs = [],[m
[36m@@ -109,4 +108,4 @@[m [mdef wasm_rust_binary(name, **kwargs):[m
         outs = [name],[m
         tools = ["//test/tools/wee8_compile:wee8_compile_tool"],[m
         cmd = "$(location //test/tools/wee8_compile:wee8_compile_tool) $(SRCS).runfiles $(OUTS).runfiles",[m
[31m-    )[m
\ No newline at end of file[m
[32m+[m[32m    )[m
[1mdiff --git a/fdf9655ba95616e0314b4e0ebab40bb0c5fe005c.tar.gz b/fdf9655ba95616e0314b4e0ebab40bb0c5fe005c.tar.gz[m
[1mdeleted file mode 100644[m
[1mindex b73ae64f7..000000000[m
Binary files a/fdf9655ba95616e0314b4e0ebab40bb0c5fe005c.tar.gz and /dev/null differ
[1mdiff --git a/test/extensions/bootstrap/wasm/test_data/BUILD b/test/extensions/bootstrap/wasm/test_data/BUILD[m
[1mindex 9183355c7..f7d706374 100644[m
[1m--- a/test/extensions/bootstrap/wasm/test_data/BUILD[m
[1m+++ b/test/extensions/bootstrap/wasm/test_data/BUILD[m
[36m@@ -12,10 +12,8 @@[m [menvoy_package()[m
 [m
 rust_library([m
     name = "proxy_wasm",[m
[31m-    srcs = ["proxy_wasm/lib.rs"],[m
[31m-    rustc_flags = [[m
[31m-        "--edition=2018",[m
[31m-    ],[m
[32m+[m[32m    srcs = ["proxy_wasm.rs"],[m
[32m+[m[32m    edition = "2018",[m
     visibility = ["//visibility:public"],[m
     deps = [[m
         "@log",[m
[1mdiff --git a/test/extensions/bootstrap/wasm/test_data/logging_rust.rs b/test/extensions/bootstrap/wasm/test_data/logging_rust.rs[m
[1mindex 78b9d5d22..d497a9931 100644[m
[1m--- a/test/extensions/bootstrap/wasm/test_data/logging_rust.rs[m
[1m+++ b/test/extensions/bootstrap/wasm/test_data/logging_rust.rs[m
[36m@@ -47,4 +47,4 @@[m [mpub fn proxy_on_delete(_context_id : u32) {[m
 [m
 // This function is to compile WebAssembly code with `rust_binary` with Bazel.[m
 // Envoy wasm runtime won't take care of this type of function.[m
[31m-fn main() {}[m
\ No newline at end of file[m
[32m+[m[32mfn main() {}[m
[1mdiff --git a/test/extensions/bootstrap/wasm/test_data/proxy_wasm/lib.rs b/test/extensions/bootstrap/wasm/test_data/proxy_wasm.rs[m
[1msimilarity index 99%[m
[1mrename from test/extensions/bootstrap/wasm/test_data/proxy_wasm/lib.rs[m
[1mrename to test/extensions/bootstrap/wasm/test_data/proxy_wasm.rs[m
[1mindex 93139612e..6a36259e6 100644[m
[1m--- a/test/extensions/bootstrap/wasm/test_data/proxy_wasm/lib.rs[m
[1m+++ b/test/extensions/bootstrap/wasm/test_data/proxy_wasm.rs[m
[36m@@ -67,4 +67,4 @@[m [mpub mod host {[m
     extern "C" {[m
         pub fn proxy_log(level: u32, message_data: *const u8, message_size: usize) -> u32;[m
     }[m
[31m-}[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/test/extensions/common/wasm/wasm_test.cc b/test/extensions/common/wasm/wasm_test.cc[m
[1mindex 2131b2847..e3f873373 100644[m
[1m--- a/test/extensions/common/wasm/wasm_test.cc[m
[1m+++ b/test/extensions/common/wasm/wasm_test.cc[m
[36m@@ -41,7 +41,6 @@[m [mstd::string Sha256(absl::string_view data) {[m
 [m
 class TestContext : public Extensions::Common::Wasm::Context {[m
 public:[m
[31m-  using Extensions::Common::Wasm::Context::log;[m
   TestContext() : Extensions::Common::Wasm::Context() {}[m
   TestContext(Extensions::Common::Wasm::Wasm* wasm) : Extensions::Common::Wasm::Context(wasm) {}[m
   TestContext(Extensions::Common::Wasm::Wasm* wasm,[m
[1mdiff --git a/test/extensions/common/wasm/wasm_vm_test.cc b/test/extensions/common/wasm/wasm_vm_test.cc[m
[1mindex 356ab1464..58069db02 100644[m
[1m--- a/test/extensions/common/wasm/wasm_vm_test.cc[m
[1m+++ b/test/extensions/common/wasm/wasm_vm_test.cc[m
[36m@@ -140,6 +140,7 @@[m [mTEST_P(WasmVmTest, V8Code) {[m
   auto wasm_vm = createWasmVm("envoy.wasm.runtime.v8", scope_);[m
   ASSERT_TRUE(wasm_vm != nullptr);[m
   EXPECT_TRUE(wasm_vm->runtime() == "v8");[m
[32m+[m
   auto code = TestEnvironment::readFileToStringForTest(TestEnvironment::substitute([m
       "{{ test_rundir }}/test/extensions/common/wasm/test_data/test_rust.wasm"));[m
   EXPECT_TRUE(wasm_vm->load(code, GetParam()));[m
